// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Auction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Auction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Auction", id.toString(), this);
  }

  static load(id: string): Auction | null {
    return store.get("Auction", id) as Auction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get totalBids(): BigInt {
    let value = this.get("totalBids");
    return value.toBigInt();
  }

  set totalBids(value: BigInt) {
    this.set("totalBids", Value.fromBigInt(value));
  }

  get totalCham(): BigDecimal {
    let value = this.get("totalCham");
    return value.toBigDecimal();
  }

  set totalCham(value: BigDecimal) {
    this.set("totalCham", Value.fromBigDecimal(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get initialBidAmount(): BigDecimal {
    let value = this.get("initialBidAmount");
    return value.toBigDecimal();
  }

  set initialBidAmount(value: BigDecimal) {
    this.set("initialBidAmount", Value.fromBigDecimal(value));
  }

  get leaderboard(): BigInt {
    let value = this.get("leaderboard");
    return value.toBigInt();
  }

  set leaderboard(value: BigInt) {
    this.set("leaderboard", Value.fromBigInt(value));
  }

  get leaderboardThreshold(): BigDecimal {
    let value = this.get("leaderboardThreshold");
    return value.toBigDecimal();
  }

  set leaderboardThreshold(value: BigDecimal) {
    this.set("leaderboardThreshold", Value.fromBigDecimal(value));
  }
}

export class Bidder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bidder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bidder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bidder", id.toString(), this);
  }

  static load(id: string): Bidder | null {
    return store.get("Bidder", id) as Bidder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get totalBids(): BigInt {
    let value = this.get("totalBids");
    return value.toBigInt();
  }

  set totalBids(value: BigInt) {
    this.set("totalBids", Value.fromBigInt(value));
  }

  get totalCham(): BigDecimal {
    let value = this.get("totalCham");
    return value.toBigDecimal();
  }

  set totalCham(value: BigDecimal) {
    this.set("totalCham", Value.fromBigDecimal(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
