// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Timelock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Timelock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Timelock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Timelock", id.toString(), this);
  }

  static load(id: string): Timelock | null {
    return store.get("Timelock", id) as Timelock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get signature(): string {
    let value = this.get("signature");
    return value.toString();
  }

  set signature(value: string) {
    this.set("signature", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get eta(): BigInt {
    let value = this.get("eta");
    return value.toBigInt();
  }

  set eta(value: BigInt) {
    this.set("eta", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdHash(): Bytes {
    let value = this.get("createdHash");
    return value.toBytes();
  }

  set createdHash(value: Bytes) {
    this.set("createdHash", Value.fromBytes(value));
  }

  get expiresAt(): BigInt {
    let value = this.get("expiresAt");
    return value.toBigInt();
  }

  set expiresAt(value: BigInt) {
    this.set("expiresAt", Value.fromBigInt(value));
  }

  get executedAt(): BigInt | null {
    let value = this.get("executedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("executedAt");
    } else {
      this.set("executedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get executedBlock(): BigInt | null {
    let value = this.get("executedBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("executedBlock");
    } else {
      this.set("executedBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get executedHash(): Bytes | null {
    let value = this.get("executedHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executedHash(value: Bytes | null) {
    if (value === null) {
      this.unset("executedHash");
    } else {
      this.set("executedHash", Value.fromBytes(value as Bytes));
    }
  }

  get isExecuted(): boolean {
    let value = this.get("isExecuted");
    return value.toBoolean();
  }

  set isExecuted(value: boolean) {
    this.set("isExecuted", Value.fromBoolean(value));
  }

  get canceledAt(): BigInt | null {
    let value = this.get("canceledAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledAt(value: BigInt | null) {
    if (value === null) {
      this.unset("canceledAt");
    } else {
      this.set("canceledAt", Value.fromBigInt(value as BigInt));
    }
  }

  get canceledBlock(): BigInt | null {
    let value = this.get("canceledBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("canceledBlock");
    } else {
      this.set("canceledBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get canceledHash(): Bytes | null {
    let value = this.get("canceledHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set canceledHash(value: Bytes | null) {
    if (value === null) {
      this.unset("canceledHash");
    } else {
      this.set("canceledHash", Value.fromBytes(value as Bytes));
    }
  }

  get isCanceled(): boolean {
    let value = this.get("isCanceled");
    return value.toBoolean();
  }

  set isCanceled(value: boolean) {
    this.set("isCanceled", Value.fromBoolean(value));
  }
}
