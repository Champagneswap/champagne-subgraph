// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Collection entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Collection entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Collection", id.toString(), this);
  }

  static load(id: string): Collection | null {
    return store.get("Collection", id) as Collection | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get totalVolumeBNB(): BigDecimal {
    let value = this.get("totalVolumeBNB");
    return value.toBigDecimal();
  }

  set totalVolumeBNB(value: BigDecimal) {
    this.set("totalVolumeBNB", Value.fromBigDecimal(value));
  }

  get numberTokensListed(): BigInt {
    let value = this.get("numberTokensListed");
    return value.toBigInt();
  }

  set numberTokensListed(value: BigInt) {
    this.set("numberTokensListed", Value.fromBigInt(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    return value.toBytes();
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get tradingFee(): BigDecimal {
    let value = this.get("tradingFee");
    return value.toBigDecimal();
  }

  set tradingFee(value: BigDecimal) {
    this.set("tradingFee", Value.fromBigDecimal(value));
  }

  get creatorFee(): BigDecimal {
    let value = this.get("creatorFee");
    return value.toBigDecimal();
  }

  set creatorFee(value: BigDecimal) {
    this.set("creatorFee", Value.fromBigDecimal(value));
  }

  get whitelistChecker(): Bytes {
    let value = this.get("whitelistChecker");
    return value.toBytes();
  }

  set whitelistChecker(value: Bytes) {
    this.set("whitelistChecker", Value.fromBytes(value));
  }

  get dayData(): Array<string> {
    let value = this.get("dayData");
    return value.toStringArray();
  }

  set dayData(value: Array<string>) {
    this.set("dayData", Value.fromStringArray(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFT entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFT entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFT", id.toString(), this);
  }

  static load(id: string): NFT | null {
    return store.get("NFT", id) as NFT | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get otherId(): BigInt | null {
    let value = this.get("otherId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set otherId(value: BigInt | null) {
    if (value === null) {
      this.unset("otherId");
    } else {
      this.set("otherId", Value.fromBigInt(value as BigInt));
    }
  }

  get collection(): string {
    let value = this.get("collection");
    return value.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get metadataUrl(): string | null {
    let value = this.get("metadataUrl");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataUrl(value: string | null) {
    if (value === null) {
      this.unset("metadataUrl");
    } else {
      this.set("metadataUrl", Value.fromString(value as string));
    }
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get currentAskPrice(): BigDecimal {
    let value = this.get("currentAskPrice");
    return value.toBigDecimal();
  }

  set currentAskPrice(value: BigDecimal) {
    this.set("currentAskPrice", Value.fromBigDecimal(value));
  }

  get currentSeller(): string {
    let value = this.get("currentSeller");
    return value.toString();
  }

  set currentSeller(value: string) {
    this.set("currentSeller", Value.fromString(value));
  }

  get latestTradedPriceInBNB(): BigDecimal {
    let value = this.get("latestTradedPriceInBNB");
    return value.toBigDecimal();
  }

  set latestTradedPriceInBNB(value: BigDecimal) {
    this.set("latestTradedPriceInBNB", Value.fromBigDecimal(value));
  }

  get tradeVolumeBNB(): BigDecimal {
    let value = this.get("tradeVolumeBNB");
    return value.toBigDecimal();
  }

  set tradeVolumeBNB(value: BigDecimal) {
    this.set("tradeVolumeBNB", Value.fromBigDecimal(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get transactionHistory(): Array<string> {
    let value = this.get("transactionHistory");
    return value.toStringArray();
  }

  set transactionHistory(value: Array<string>) {
    this.set("transactionHistory", Value.fromStringArray(value));
  }

  get askHistory(): Array<string> {
    let value = this.get("askHistory");
    return value.toStringArray();
  }

  set askHistory(value: Array<string>) {
    this.set("askHistory", Value.fromStringArray(value));
  }

  get isTradable(): boolean {
    let value = this.get("isTradable");
    return value.toBoolean();
  }

  set isTradable(value: boolean) {
    this.set("isTradable", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numberTokensListed(): BigInt {
    let value = this.get("numberTokensListed");
    return value.toBigInt();
  }

  set numberTokensListed(value: BigInt) {
    this.set("numberTokensListed", Value.fromBigInt(value));
  }

  get numberTokensPurchased(): BigInt {
    let value = this.get("numberTokensPurchased");
    return value.toBigInt();
  }

  set numberTokensPurchased(value: BigInt) {
    this.set("numberTokensPurchased", Value.fromBigInt(value));
  }

  get numberTokensSold(): BigInt {
    let value = this.get("numberTokensSold");
    return value.toBigInt();
  }

  set numberTokensSold(value: BigInt) {
    this.set("numberTokensSold", Value.fromBigInt(value));
  }

  get totalVolumeInBNBTokensPurchased(): BigDecimal {
    let value = this.get("totalVolumeInBNBTokensPurchased");
    return value.toBigDecimal();
  }

  set totalVolumeInBNBTokensPurchased(value: BigDecimal) {
    this.set("totalVolumeInBNBTokensPurchased", Value.fromBigDecimal(value));
  }

  get totalVolumeInBNBTokensSold(): BigDecimal {
    let value = this.get("totalVolumeInBNBTokensSold");
    return value.toBigDecimal();
  }

  set totalVolumeInBNBTokensSold(value: BigDecimal) {
    this.set("totalVolumeInBNBTokensSold", Value.fromBigDecimal(value));
  }

  get totalFeesCollectedInBNB(): BigDecimal {
    let value = this.get("totalFeesCollectedInBNB");
    return value.toBigDecimal();
  }

  set totalFeesCollectedInBNB(value: BigDecimal) {
    this.set("totalFeesCollectedInBNB", Value.fromBigDecimal(value));
  }

  get buyTradeHistory(): Array<string> {
    let value = this.get("buyTradeHistory");
    return value.toStringArray();
  }

  set buyTradeHistory(value: Array<string>) {
    this.set("buyTradeHistory", Value.fromStringArray(value));
  }

  get sellTradeHistory(): Array<string> {
    let value = this.get("sellTradeHistory");
    return value.toStringArray();
  }

  set sellTradeHistory(value: Array<string>) {
    this.set("sellTradeHistory", Value.fromStringArray(value));
  }

  get askOrderHistory(): Array<string> {
    let value = this.get("askOrderHistory");
    return value.toStringArray();
  }

  set askOrderHistory(value: Array<string>) {
    this.set("askOrderHistory", Value.fromStringArray(value));
  }

  get averageTokenPriceInBNBPurchased(): BigDecimal {
    let value = this.get("averageTokenPriceInBNBPurchased");
    return value.toBigDecimal();
  }

  set averageTokenPriceInBNBPurchased(value: BigDecimal) {
    this.set("averageTokenPriceInBNBPurchased", Value.fromBigDecimal(value));
  }

  get averageTokenPriceInBNBSold(): BigDecimal {
    let value = this.get("averageTokenPriceInBNBSold");
    return value.toBigDecimal();
  }

  set averageTokenPriceInBNBSold(value: BigDecimal) {
    this.set("averageTokenPriceInBNBSold", Value.fromBigDecimal(value));
  }
}

export class AskOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AskOrder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AskOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AskOrder", id.toString(), this);
  }

  static load(id: string): AskOrder | null {
    return store.get("AskOrder", id) as AskOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get orderType(): string {
    let value = this.get("orderType");
    return value.toString();
  }

  set orderType(value: string) {
    this.set("orderType", Value.fromString(value));
  }

  get askPrice(): BigDecimal {
    let value = this.get("askPrice");
    return value.toBigDecimal();
  }

  set askPrice(value: BigDecimal) {
    this.set("askPrice", Value.fromBigDecimal(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get askPrice(): BigDecimal {
    let value = this.get("askPrice");
    return value.toBigDecimal();
  }

  set askPrice(value: BigDecimal) {
    this.set("askPrice", Value.fromBigDecimal(value));
  }

  get netPrice(): BigDecimal {
    let value = this.get("netPrice");
    return value.toBigDecimal();
  }

  set netPrice(value: BigDecimal) {
    this.set("netPrice", Value.fromBigDecimal(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get withBNB(): boolean {
    let value = this.get("withBNB");
    return value.toBoolean();
  }

  set withBNB(value: boolean) {
    this.set("withBNB", Value.fromBoolean(value));
  }
}

export class CollectionDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollectionDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollectionDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollectionDayData", id.toString(), this);
  }

  static load(id: string): CollectionDayData | null {
    return store.get("CollectionDayData", id) as CollectionDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get dailyVolumeBNB(): BigDecimal {
    let value = this.get("dailyVolumeBNB");
    return value.toBigDecimal();
  }

  set dailyVolumeBNB(value: BigDecimal) {
    this.set("dailyVolumeBNB", Value.fromBigDecimal(value));
  }

  get dailyTrades(): BigInt {
    let value = this.get("dailyTrades");
    return value.toBigInt();
  }

  set dailyTrades(value: BigInt) {
    this.set("dailyTrades", Value.fromBigInt(value));
  }
}

export class MarketPlaceDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketPlaceDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketPlaceDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketPlaceDayData", id.toString(), this);
  }

  static load(id: string): MarketPlaceDayData | null {
    return store.get("MarketPlaceDayData", id) as MarketPlaceDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyVolumeBNB(): BigDecimal {
    let value = this.get("dailyVolumeBNB");
    return value.toBigDecimal();
  }

  set dailyVolumeBNB(value: BigDecimal) {
    this.set("dailyVolumeBNB", Value.fromBigDecimal(value));
  }

  get dailyTrades(): BigInt {
    let value = this.get("dailyTrades");
    return value.toBigInt();
  }

  set dailyTrades(value: BigInt) {
    this.set("dailyTrades", Value.fromBigInt(value));
  }
}
