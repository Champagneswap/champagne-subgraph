// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AskCancel extends ethereum.Event {
  get params(): AskCancel__Params {
    return new AskCancel__Params(this);
  }
}

export class AskCancel__Params {
  _event: AskCancel;

  constructor(event: AskCancel) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AskNew extends ethereum.Event {
  get params(): AskNew__Params {
    return new AskNew__Params(this);
  }
}

export class AskNew__Params {
  _event: AskNew;

  constructor(event: AskNew) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get askPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AskUpdate extends ethereum.Event {
  get params(): AskUpdate__Params {
    return new AskUpdate__Params(this);
  }
}

export class AskUpdate__Params {
  _event: AskUpdate;

  constructor(event: AskUpdate) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get askPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CollectionClose extends ethereum.Event {
  get params(): CollectionClose__Params {
    return new CollectionClose__Params(this);
  }
}

export class CollectionClose__Params {
  _event: CollectionClose;

  constructor(event: CollectionClose) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollectionNew extends ethereum.Event {
  get params(): CollectionNew__Params {
    return new CollectionNew__Params(this);
  }
}

export class CollectionNew__Params {
  _event: CollectionNew;

  constructor(event: CollectionNew) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get whitelistChecker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tradingFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get creatorFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CollectionUpdate extends ethereum.Event {
  get params(): CollectionUpdate__Params {
    return new CollectionUpdate__Params(this);
  }
}

export class CollectionUpdate__Params {
  _event: CollectionUpdate;

  constructor(event: CollectionUpdate) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get whitelistChecker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tradingFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get creatorFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewAdminAndTreasuryAddresses extends ethereum.Event {
  get params(): NewAdminAndTreasuryAddresses__Params {
    return new NewAdminAndTreasuryAddresses__Params(this);
  }
}

export class NewAdminAndTreasuryAddresses__Params {
  _event: NewAdminAndTreasuryAddresses;

  constructor(event: NewAdminAndTreasuryAddresses) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get treasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewMinimumAndMaximumAskPrices extends ethereum.Event {
  get params(): NewMinimumAndMaximumAskPrices__Params {
    return new NewMinimumAndMaximumAskPrices__Params(this);
  }
}

export class NewMinimumAndMaximumAskPrices__Params {
  _event: NewMinimumAndMaximumAskPrices;

  constructor(event: NewMinimumAndMaximumAskPrices) {
    this._event = event;
  }

  get minimumAskPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maximumAskPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NonFungibleTokenRecovery extends ethereum.Event {
  get params(): NonFungibleTokenRecovery__Params {
    return new NonFungibleTokenRecovery__Params(this);
  }
}

export class NonFungibleTokenRecovery__Params {
  _event: NonFungibleTokenRecovery;

  constructor(event: NonFungibleTokenRecovery) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevenueClaim extends ethereum.Event {
  get params(): RevenueClaim__Params {
    return new RevenueClaim__Params(this);
  }
}

export class RevenueClaim__Params {
  _event: RevenueClaim;

  constructor(event: RevenueClaim) {
    this._event = event;
  }

  get claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenRecovery extends ethereum.Event {
  get params(): TokenRecovery__Params {
    return new TokenRecovery__Params(this);
  }
}

export class TokenRecovery__Params {
  _event: TokenRecovery;

  constructor(event: TokenRecovery) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get askPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get netPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get withBNB(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class ERC721NFTMarketV1__calculatePriceAndFeesForCollectionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ERC721NFTMarketV1__viewAsksByCollectionResultAskInfoStruct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC721NFTMarketV1__viewAsksByCollectionResult {
  value0: Array<BigInt>;
  value1: Array<ERC721NFTMarketV1__viewAsksByCollectionResultAskInfoStruct>;
  value2: BigInt;

  constructor(
    value0: Array<BigInt>,
    value1: Array<ERC721NFTMarketV1__viewAsksByCollectionResultAskInfoStruct>,
    value2: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ERC721NFTMarketV1__viewAsksByCollectionAndSellerResultAskInfoStruct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC721NFTMarketV1__viewAsksByCollectionAndSellerResult {
  value0: Array<BigInt>;
  value1: Array<ERC721NFTMarketV1__viewAsksByCollectionAndSellerResultAskInfoStruct>;
  value2: BigInt;

  constructor(
    value0: Array<BigInt>,
    value1: Array<ERC721NFTMarketV1__viewAsksByCollectionAndSellerResultAskInfoStruct>,
    value2: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ERC721NFTMarketV1__viewCollectionsResultCollectionDetailsStruct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get creatorAddress(): Address {
    return this[1].toAddress();
  }

  get whitelistChecker(): Address {
    return this[2].toAddress();
  }

  get tradingFee(): BigInt {
    return this[3].toBigInt();
  }

  get creatorFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class ERC721NFTMarketV1__viewCollectionsResult {
  value0: Array<Address>;
  value1: Array<ERC721NFTMarketV1__viewCollectionsResultCollectionDetailsStruct>;
  value2: BigInt;

  constructor(
    value0: Array<Address>,
    value1: Array<ERC721NFTMarketV1__viewCollectionsResultCollectionDetailsStruct>,
    value2: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ERC721NFTMarketV1 extends ethereum.SmartContract {
  static bind(address: Address): ERC721NFTMarketV1 {
    return new ERC721NFTMarketV1("ERC721NFTMarketV1", address);
  }

  TOTAL_MAX_FEE(): BigInt {
    let result = super.call("TOTAL_MAX_FEE", "TOTAL_MAX_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TOTAL_MAX_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_MAX_FEE",
      "TOTAL_MAX_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WBNB(): Address {
    let result = super.call("WBNB", "WBNB():(address)", []);

    return result[0].toAddress();
  }

  try_WBNB(): ethereum.CallResult<Address> {
    let result = super.tryCall("WBNB", "WBNB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminAddress(): Address {
    let result = super.call("adminAddress", "adminAddress():(address)", []);

    return result[0].toAddress();
  }

  try_adminAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("adminAddress", "adminAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculatePriceAndFeesForCollection(
    collection: Address,
    price: BigInt
  ): ERC721NFTMarketV1__calculatePriceAndFeesForCollectionResult {
    let result = super.call(
      "calculatePriceAndFeesForCollection",
      "calculatePriceAndFeesForCollection(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(price),
      ]
    );

    return new ERC721NFTMarketV1__calculatePriceAndFeesForCollectionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_calculatePriceAndFeesForCollection(
    collection: Address,
    price: BigInt
  ): ethereum.CallResult<ERC721NFTMarketV1__calculatePriceAndFeesForCollectionResult> {
    let result = super.tryCall(
      "calculatePriceAndFeesForCollection",
      "calculatePriceAndFeesForCollection(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(price),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721NFTMarketV1__calculatePriceAndFeesForCollectionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  canTokensBeListed(
    _collection: Address,
    _tokenIds: Array<BigInt>
  ): Array<boolean> {
    let result = super.call(
      "canTokensBeListed",
      "canTokensBeListed(address,uint256[]):(bool[])",
      [
        ethereum.Value.fromAddress(_collection),
        ethereum.Value.fromUnsignedBigIntArray(_tokenIds),
      ]
    );

    return result[0].toBooleanArray();
  }

  try_canTokensBeListed(
    _collection: Address,
    _tokenIds: Array<BigInt>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "canTokensBeListed",
      "canTokensBeListed(address,uint256[]):(bool[])",
      [
        ethereum.Value.fromAddress(_collection),
        ethereum.Value.fromUnsignedBigIntArray(_tokenIds),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  maximumAskPrice(): BigInt {
    let result = super.call(
      "maximumAskPrice",
      "maximumAskPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumAskPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumAskPrice",
      "maximumAskPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumAskPrice(): BigInt {
    let result = super.call(
      "minimumAskPrice",
      "minimumAskPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumAskPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumAskPrice",
      "minimumAskPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingRevenue(param0: Address): BigInt {
    let result = super.call(
      "pendingRevenue",
      "pendingRevenue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingRevenue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingRevenue",
      "pendingRevenue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  viewAsksByCollection(
    collection: Address,
    cursor: BigInt,
    size: BigInt
  ): ERC721NFTMarketV1__viewAsksByCollectionResult {
    let result = super.call(
      "viewAsksByCollection",
      "viewAsksByCollection(address,uint256,uint256):(uint256[],(address,uint256)[],uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(size),
      ]
    );

    return new ERC721NFTMarketV1__viewAsksByCollectionResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<ERC721NFTMarketV1__viewAsksByCollectionResultAskInfoStruct>(),
      result[2].toBigInt()
    );
  }

  try_viewAsksByCollection(
    collection: Address,
    cursor: BigInt,
    size: BigInt
  ): ethereum.CallResult<ERC721NFTMarketV1__viewAsksByCollectionResult> {
    let result = super.tryCall(
      "viewAsksByCollection",
      "viewAsksByCollection(address,uint256,uint256):(uint256[],(address,uint256)[],uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(size),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721NFTMarketV1__viewAsksByCollectionResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<ERC721NFTMarketV1__viewAsksByCollectionResultAskInfoStruct>(),
        value[2].toBigInt()
      )
    );
  }

  viewAsksByCollectionAndSeller(
    collection: Address,
    seller: Address,
    cursor: BigInt,
    size: BigInt
  ): ERC721NFTMarketV1__viewAsksByCollectionAndSellerResult {
    let result = super.call(
      "viewAsksByCollectionAndSeller",
      "viewAsksByCollectionAndSeller(address,address,uint256,uint256):(uint256[],(address,uint256)[],uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromAddress(seller),
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(size),
      ]
    );

    return new ERC721NFTMarketV1__viewAsksByCollectionAndSellerResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<ERC721NFTMarketV1__viewAsksByCollectionAndSellerResultAskInfoStruct>(),
      result[2].toBigInt()
    );
  }

  try_viewAsksByCollectionAndSeller(
    collection: Address,
    seller: Address,
    cursor: BigInt,
    size: BigInt
  ): ethereum.CallResult<ERC721NFTMarketV1__viewAsksByCollectionAndSellerResult> {
    let result = super.tryCall(
      "viewAsksByCollectionAndSeller",
      "viewAsksByCollectionAndSeller(address,address,uint256,uint256):(uint256[],(address,uint256)[],uint256)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromAddress(seller),
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(size),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721NFTMarketV1__viewAsksByCollectionAndSellerResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<ERC721NFTMarketV1__viewAsksByCollectionAndSellerResultAskInfoStruct>(),
        value[2].toBigInt()
      )
    );
  }

  viewCollections(
    cursor: BigInt,
    size: BigInt
  ): ERC721NFTMarketV1__viewCollectionsResult {
    let result = super.call(
      "viewCollections",
      "viewCollections(uint256,uint256):(address[],(uint8,address,address,uint256,uint256)[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(size),
      ]
    );

    return new ERC721NFTMarketV1__viewCollectionsResult(
      result[0].toAddressArray(),
      result[1].toTupleArray<ERC721NFTMarketV1__viewCollectionsResultCollectionDetailsStruct>(),
      result[2].toBigInt()
    );
  }

  try_viewCollections(
    cursor: BigInt,
    size: BigInt
  ): ethereum.CallResult<ERC721NFTMarketV1__viewCollectionsResult> {
    let result = super.tryCall(
      "viewCollections",
      "viewCollections(uint256,uint256):(address[],(uint8,address,address,uint256,uint256)[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(size),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721NFTMarketV1__viewCollectionsResult(
        value[0].toAddressArray(),
        value[1].toTupleArray<ERC721NFTMarketV1__viewCollectionsResultCollectionDetailsStruct>(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _adminAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasuryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _WBNBAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minimumAskPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maximumAskPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCollectionCall extends ethereum.Call {
  get inputs(): AddCollectionCall__Inputs {
    return new AddCollectionCall__Inputs(this);
  }

  get outputs(): AddCollectionCall__Outputs {
    return new AddCollectionCall__Outputs(this);
  }
}

export class AddCollectionCall__Inputs {
  _call: AddCollectionCall;

  constructor(call: AddCollectionCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _whitelistChecker(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tradingFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _creatorFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddCollectionCall__Outputs {
  _call: AddCollectionCall;

  constructor(call: AddCollectionCall) {
    this._call = call;
  }
}

export class BuyTokenUsingBNBCall extends ethereum.Call {
  get inputs(): BuyTokenUsingBNBCall__Inputs {
    return new BuyTokenUsingBNBCall__Inputs(this);
  }

  get outputs(): BuyTokenUsingBNBCall__Outputs {
    return new BuyTokenUsingBNBCall__Outputs(this);
  }
}

export class BuyTokenUsingBNBCall__Inputs {
  _call: BuyTokenUsingBNBCall;

  constructor(call: BuyTokenUsingBNBCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyTokenUsingBNBCall__Outputs {
  _call: BuyTokenUsingBNBCall;

  constructor(call: BuyTokenUsingBNBCall) {
    this._call = call;
  }
}

export class BuyTokenUsingWBNBCall extends ethereum.Call {
  get inputs(): BuyTokenUsingWBNBCall__Inputs {
    return new BuyTokenUsingWBNBCall__Inputs(this);
  }

  get outputs(): BuyTokenUsingWBNBCall__Outputs {
    return new BuyTokenUsingWBNBCall__Outputs(this);
  }
}

export class BuyTokenUsingWBNBCall__Inputs {
  _call: BuyTokenUsingWBNBCall;

  constructor(call: BuyTokenUsingWBNBCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyTokenUsingWBNBCall__Outputs {
  _call: BuyTokenUsingWBNBCall;

  constructor(call: BuyTokenUsingWBNBCall) {
    this._call = call;
  }
}

export class CancelAskOrderCall extends ethereum.Call {
  get inputs(): CancelAskOrderCall__Inputs {
    return new CancelAskOrderCall__Inputs(this);
  }

  get outputs(): CancelAskOrderCall__Outputs {
    return new CancelAskOrderCall__Outputs(this);
  }
}

export class CancelAskOrderCall__Inputs {
  _call: CancelAskOrderCall;

  constructor(call: CancelAskOrderCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelAskOrderCall__Outputs {
  _call: CancelAskOrderCall;

  constructor(call: CancelAskOrderCall) {
    this._call = call;
  }
}

export class ClaimPendingRevenueCall extends ethereum.Call {
  get inputs(): ClaimPendingRevenueCall__Inputs {
    return new ClaimPendingRevenueCall__Inputs(this);
  }

  get outputs(): ClaimPendingRevenueCall__Outputs {
    return new ClaimPendingRevenueCall__Outputs(this);
  }
}

export class ClaimPendingRevenueCall__Inputs {
  _call: ClaimPendingRevenueCall;

  constructor(call: ClaimPendingRevenueCall) {
    this._call = call;
  }
}

export class ClaimPendingRevenueCall__Outputs {
  _call: ClaimPendingRevenueCall;

  constructor(call: ClaimPendingRevenueCall) {
    this._call = call;
  }
}

export class CloseCollectionForTradingAndListingCall extends ethereum.Call {
  get inputs(): CloseCollectionForTradingAndListingCall__Inputs {
    return new CloseCollectionForTradingAndListingCall__Inputs(this);
  }

  get outputs(): CloseCollectionForTradingAndListingCall__Outputs {
    return new CloseCollectionForTradingAndListingCall__Outputs(this);
  }
}

export class CloseCollectionForTradingAndListingCall__Inputs {
  _call: CloseCollectionForTradingAndListingCall;

  constructor(call: CloseCollectionForTradingAndListingCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CloseCollectionForTradingAndListingCall__Outputs {
  _call: CloseCollectionForTradingAndListingCall;

  constructor(call: CloseCollectionForTradingAndListingCall) {
    this._call = call;
  }
}

export class CreateAskOrderCall extends ethereum.Call {
  get inputs(): CreateAskOrderCall__Inputs {
    return new CreateAskOrderCall__Inputs(this);
  }

  get outputs(): CreateAskOrderCall__Outputs {
    return new CreateAskOrderCall__Outputs(this);
  }
}

export class CreateAskOrderCall__Inputs {
  _call: CreateAskOrderCall;

  constructor(call: CreateAskOrderCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _askPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateAskOrderCall__Outputs {
  _call: CreateAskOrderCall;

  constructor(call: CreateAskOrderCall) {
    this._call = call;
  }
}

export class ModifyAskOrderCall extends ethereum.Call {
  get inputs(): ModifyAskOrderCall__Inputs {
    return new ModifyAskOrderCall__Inputs(this);
  }

  get outputs(): ModifyAskOrderCall__Outputs {
    return new ModifyAskOrderCall__Outputs(this);
  }
}

export class ModifyAskOrderCall__Inputs {
  _call: ModifyAskOrderCall;

  constructor(call: ModifyAskOrderCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ModifyAskOrderCall__Outputs {
  _call: ModifyAskOrderCall;

  constructor(call: ModifyAskOrderCall) {
    this._call = call;
  }
}

export class ModifyCollectionCall extends ethereum.Call {
  get inputs(): ModifyCollectionCall__Inputs {
    return new ModifyCollectionCall__Inputs(this);
  }

  get outputs(): ModifyCollectionCall__Outputs {
    return new ModifyCollectionCall__Outputs(this);
  }
}

export class ModifyCollectionCall__Inputs {
  _call: ModifyCollectionCall;

  constructor(call: ModifyCollectionCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _whitelistChecker(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tradingFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _creatorFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ModifyCollectionCall__Outputs {
  _call: ModifyCollectionCall;

  constructor(call: ModifyCollectionCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RecoverFungibleTokensCall extends ethereum.Call {
  get inputs(): RecoverFungibleTokensCall__Inputs {
    return new RecoverFungibleTokensCall__Inputs(this);
  }

  get outputs(): RecoverFungibleTokensCall__Outputs {
    return new RecoverFungibleTokensCall__Outputs(this);
  }
}

export class RecoverFungibleTokensCall__Inputs {
  _call: RecoverFungibleTokensCall;

  constructor(call: RecoverFungibleTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverFungibleTokensCall__Outputs {
  _call: RecoverFungibleTokensCall;

  constructor(call: RecoverFungibleTokensCall) {
    this._call = call;
  }
}

export class RecoverNonFungibleTokenCall extends ethereum.Call {
  get inputs(): RecoverNonFungibleTokenCall__Inputs {
    return new RecoverNonFungibleTokenCall__Inputs(this);
  }

  get outputs(): RecoverNonFungibleTokenCall__Outputs {
    return new RecoverNonFungibleTokenCall__Outputs(this);
  }
}

export class RecoverNonFungibleTokenCall__Inputs {
  _call: RecoverNonFungibleTokenCall;

  constructor(call: RecoverNonFungibleTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverNonFungibleTokenCall__Outputs {
  _call: RecoverNonFungibleTokenCall;

  constructor(call: RecoverNonFungibleTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAdminAndTreasuryAddressesCall extends ethereum.Call {
  get inputs(): SetAdminAndTreasuryAddressesCall__Inputs {
    return new SetAdminAndTreasuryAddressesCall__Inputs(this);
  }

  get outputs(): SetAdminAndTreasuryAddressesCall__Outputs {
    return new SetAdminAndTreasuryAddressesCall__Outputs(this);
  }
}

export class SetAdminAndTreasuryAddressesCall__Inputs {
  _call: SetAdminAndTreasuryAddressesCall;

  constructor(call: SetAdminAndTreasuryAddressesCall) {
    this._call = call;
  }

  get _adminAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasuryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAdminAndTreasuryAddressesCall__Outputs {
  _call: SetAdminAndTreasuryAddressesCall;

  constructor(call: SetAdminAndTreasuryAddressesCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMinimumAndMaximumPricesCall extends ethereum.Call {
  get inputs(): UpdateMinimumAndMaximumPricesCall__Inputs {
    return new UpdateMinimumAndMaximumPricesCall__Inputs(this);
  }

  get outputs(): UpdateMinimumAndMaximumPricesCall__Outputs {
    return new UpdateMinimumAndMaximumPricesCall__Outputs(this);
  }
}

export class UpdateMinimumAndMaximumPricesCall__Inputs {
  _call: UpdateMinimumAndMaximumPricesCall;

  constructor(call: UpdateMinimumAndMaximumPricesCall) {
    this._call = call;
  }

  get _minimumAskPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maximumAskPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMinimumAndMaximumPricesCall__Outputs {
  _call: UpdateMinimumAndMaximumPricesCall;

  constructor(call: UpdateMinimumAndMaximumPricesCall) {
    this._call = call;
  }
}
