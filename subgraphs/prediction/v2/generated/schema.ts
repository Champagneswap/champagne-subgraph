// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Market entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Market entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Market", id.toString(), this);
  }

  static load(id: string): Market | null {
    return store.get("Market", id) as Market | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): string | null {
    let value = this.get("epoch");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set epoch(value: string | null) {
    if (value === null) {
      this.unset("epoch");
    } else {
      this.set("epoch", Value.fromString(value as string));
    }
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalBetsBull(): BigInt {
    let value = this.get("totalBetsBull");
    return value.toBigInt();
  }

  set totalBetsBull(value: BigInt) {
    this.set("totalBetsBull", Value.fromBigInt(value));
  }

  get totalBetsBear(): BigInt {
    let value = this.get("totalBetsBear");
    return value.toBigInt();
  }

  set totalBetsBear(value: BigInt) {
    this.set("totalBetsBear", Value.fromBigInt(value));
  }

  get totalBNB(): BigDecimal {
    let value = this.get("totalBNB");
    return value.toBigDecimal();
  }

  set totalBNB(value: BigDecimal) {
    this.set("totalBNB", Value.fromBigDecimal(value));
  }

  get totalBNBBull(): BigDecimal {
    let value = this.get("totalBNBBull");
    return value.toBigDecimal();
  }

  set totalBNBBull(value: BigDecimal) {
    this.set("totalBNBBull", Value.fromBigDecimal(value));
  }

  get totalBNBBear(): BigDecimal {
    let value = this.get("totalBNBBear");
    return value.toBigDecimal();
  }

  set totalBNBBear(value: BigDecimal) {
    this.set("totalBNBBear", Value.fromBigDecimal(value));
  }

  get totalBNBTreasury(): BigDecimal {
    let value = this.get("totalBNBTreasury");
    return value.toBigDecimal();
  }

  set totalBNBTreasury(value: BigDecimal) {
    this.set("totalBNBTreasury", Value.fromBigDecimal(value));
  }

  get totalBetsClaimed(): BigInt {
    let value = this.get("totalBetsClaimed");
    return value.toBigInt();
  }

  set totalBetsClaimed(value: BigInt) {
    this.set("totalBetsClaimed", Value.fromBigInt(value));
  }

  get totalBNBClaimed(): BigDecimal {
    let value = this.get("totalBNBClaimed");
    return value.toBigDecimal();
  }

  set totalBNBClaimed(value: BigDecimal) {
    this.set("totalBNBClaimed", Value.fromBigDecimal(value));
  }

  get winRate(): BigDecimal {
    let value = this.get("winRate");
    return value.toBigDecimal();
  }

  set winRate(value: BigDecimal) {
    this.set("winRate", Value.fromBigDecimal(value));
  }

  get averageBNB(): BigDecimal {
    let value = this.get("averageBNB");
    return value.toBigDecimal();
  }

  set averageBNB(value: BigDecimal) {
    this.set("averageBNB", Value.fromBigDecimal(value));
  }

  get netBNB(): BigDecimal {
    let value = this.get("netBNB");
    return value.toBigDecimal();
  }

  set netBNB(value: BigDecimal) {
    this.set("netBNB", Value.fromBigDecimal(value));
  }
}

export class Round extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Round entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Round entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Round", id.toString(), this);
  }

  static load(id: string): Round | null {
    return store.get("Round", id) as Round | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get position(): string | null {
    let value = this.get("position");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set position(value: string | null) {
    if (value === null) {
      this.unset("position");
    } else {
      this.set("position", Value.fromString(value as string));
    }
  }

  get failed(): boolean {
    let value = this.get("failed");
    return value.toBoolean();
  }

  set failed(value: boolean) {
    this.set("failed", Value.fromBoolean(value));
  }

  get previous(): string | null {
    let value = this.get("previous");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previous(value: string | null) {
    if (value === null) {
      this.unset("previous");
    } else {
      this.set("previous", Value.fromString(value as string));
    }
  }

  get startAt(): BigInt {
    let value = this.get("startAt");
    return value.toBigInt();
  }

  set startAt(value: BigInt) {
    this.set("startAt", Value.fromBigInt(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get startHash(): Bytes {
    let value = this.get("startHash");
    return value.toBytes();
  }

  set startHash(value: Bytes) {
    this.set("startHash", Value.fromBytes(value));
  }

  get lockAt(): BigInt | null {
    let value = this.get("lockAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockAt(value: BigInt | null) {
    if (value === null) {
      this.unset("lockAt");
    } else {
      this.set("lockAt", Value.fromBigInt(value as BigInt));
    }
  }

  get lockBlock(): BigInt | null {
    let value = this.get("lockBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("lockBlock");
    } else {
      this.set("lockBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get lockHash(): Bytes | null {
    let value = this.get("lockHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lockHash(value: Bytes | null) {
    if (value === null) {
      this.unset("lockHash");
    } else {
      this.set("lockHash", Value.fromBytes(value as Bytes));
    }
  }

  get lockPrice(): BigDecimal | null {
    let value = this.get("lockPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lockPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("lockPrice");
    } else {
      this.set("lockPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get lockRoundId(): BigInt | null {
    let value = this.get("lockRoundId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockRoundId(value: BigInt | null) {
    if (value === null) {
      this.unset("lockRoundId");
    } else {
      this.set("lockRoundId", Value.fromBigInt(value as BigInt));
    }
  }

  get closeAt(): BigInt | null {
    let value = this.get("closeAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeAt(value: BigInt | null) {
    if (value === null) {
      this.unset("closeAt");
    } else {
      this.set("closeAt", Value.fromBigInt(value as BigInt));
    }
  }

  get closeBlock(): BigInt | null {
    let value = this.get("closeBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("closeBlock");
    } else {
      this.set("closeBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get closeHash(): Bytes | null {
    let value = this.get("closeHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set closeHash(value: Bytes | null) {
    if (value === null) {
      this.unset("closeHash");
    } else {
      this.set("closeHash", Value.fromBytes(value as Bytes));
    }
  }

  get closePrice(): BigDecimal | null {
    let value = this.get("closePrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set closePrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("closePrice");
    } else {
      this.set("closePrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get closeRoundId(): BigInt | null {
    let value = this.get("closeRoundId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeRoundId(value: BigInt | null) {
    if (value === null) {
      this.unset("closeRoundId");
    } else {
      this.set("closeRoundId", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalAmount(): BigDecimal {
    let value = this.get("totalAmount");
    return value.toBigDecimal();
  }

  set totalAmount(value: BigDecimal) {
    this.set("totalAmount", Value.fromBigDecimal(value));
  }

  get bullBets(): BigInt {
    let value = this.get("bullBets");
    return value.toBigInt();
  }

  set bullBets(value: BigInt) {
    this.set("bullBets", Value.fromBigInt(value));
  }

  get bullAmount(): BigDecimal {
    let value = this.get("bullAmount");
    return value.toBigDecimal();
  }

  set bullAmount(value: BigDecimal) {
    this.set("bullAmount", Value.fromBigDecimal(value));
  }

  get bearBets(): BigInt {
    let value = this.get("bearBets");
    return value.toBigInt();
  }

  set bearBets(value: BigInt) {
    this.set("bearBets", Value.fromBigInt(value));
  }

  get bearAmount(): BigDecimal {
    let value = this.get("bearAmount");
    return value.toBigDecimal();
  }

  set bearAmount(value: BigDecimal) {
    this.set("bearAmount", Value.fromBigDecimal(value));
  }

  get bets(): Array<string> {
    let value = this.get("bets");
    return value.toStringArray();
  }

  set bets(value: Array<string>) {
    this.set("bets", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalBetsBull(): BigInt {
    let value = this.get("totalBetsBull");
    return value.toBigInt();
  }

  set totalBetsBull(value: BigInt) {
    this.set("totalBetsBull", Value.fromBigInt(value));
  }

  get totalBetsBear(): BigInt {
    let value = this.get("totalBetsBear");
    return value.toBigInt();
  }

  set totalBetsBear(value: BigInt) {
    this.set("totalBetsBear", Value.fromBigInt(value));
  }

  get totalBNB(): BigDecimal {
    let value = this.get("totalBNB");
    return value.toBigDecimal();
  }

  set totalBNB(value: BigDecimal) {
    this.set("totalBNB", Value.fromBigDecimal(value));
  }

  get totalBNBBull(): BigDecimal {
    let value = this.get("totalBNBBull");
    return value.toBigDecimal();
  }

  set totalBNBBull(value: BigDecimal) {
    this.set("totalBNBBull", Value.fromBigDecimal(value));
  }

  get totalBNBBear(): BigDecimal {
    let value = this.get("totalBNBBear");
    return value.toBigDecimal();
  }

  set totalBNBBear(value: BigDecimal) {
    this.set("totalBNBBear", Value.fromBigDecimal(value));
  }

  get bets(): Array<string> {
    let value = this.get("bets");
    return value.toStringArray();
  }

  set bets(value: Array<string>) {
    this.set("bets", Value.fromStringArray(value));
  }

  get totalBetsClaimed(): BigInt {
    let value = this.get("totalBetsClaimed");
    return value.toBigInt();
  }

  set totalBetsClaimed(value: BigInt) {
    this.set("totalBetsClaimed", Value.fromBigInt(value));
  }

  get totalBNBClaimed(): BigDecimal {
    let value = this.get("totalBNBClaimed");
    return value.toBigDecimal();
  }

  set totalBNBClaimed(value: BigDecimal) {
    this.set("totalBNBClaimed", Value.fromBigDecimal(value));
  }

  get winRate(): BigDecimal {
    let value = this.get("winRate");
    return value.toBigDecimal();
  }

  set winRate(value: BigDecimal) {
    this.set("winRate", Value.fromBigDecimal(value));
  }

  get averageBNB(): BigDecimal {
    let value = this.get("averageBNB");
    return value.toBigDecimal();
  }

  set averageBNB(value: BigDecimal) {
    this.set("averageBNB", Value.fromBigDecimal(value));
  }

  get netBNB(): BigDecimal {
    let value = this.get("netBNB");
    return value.toBigDecimal();
  }

  set netBNB(value: BigDecimal) {
    this.set("netBNB", Value.fromBigDecimal(value));
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bet", id.toString(), this);
  }

  static load(id: string): Bet | null {
    return store.get("Bet", id) as Bet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    return value.toString();
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get position(): string {
    let value = this.get("position");
    return value.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get claimedAt(): BigInt | null {
    let value = this.get("claimedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set claimedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("claimedAt");
    } else {
      this.set("claimedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get claimedBlock(): BigInt | null {
    let value = this.get("claimedBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set claimedBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("claimedBlock");
    } else {
      this.set("claimedBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get claimedHash(): Bytes | null {
    let value = this.get("claimedHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set claimedHash(value: Bytes | null) {
    if (value === null) {
      this.unset("claimedHash");
    } else {
      this.set("claimedHash", Value.fromBytes(value as Bytes));
    }
  }

  get claimedBNB(): BigDecimal | null {
    let value = this.get("claimedBNB");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set claimedBNB(value: BigDecimal | null) {
    if (value === null) {
      this.unset("claimedBNB");
    } else {
      this.set("claimedBNB", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get claimedNetBNB(): BigDecimal | null {
    let value = this.get("claimedNetBNB");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set claimedNetBNB(value: BigDecimal | null) {
    if (value === null) {
      this.unset("claimedNetBNB");
    } else {
      this.set("claimedNetBNB", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
